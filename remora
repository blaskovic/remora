#!/usr/bin/env ruby

disable_dbus = ARGV.delete '--no-dbus'
disable_drb = ARGV.delete '--no-drb'

require 'drb' unless disable_drb
require 'dbus-interface' unless disable_dbus

if ARGV.any?
  if ARGV.delete 'nowplaying'
    DRb.start_service
    client = DRbObject.new nil, 'druby://localhost:68739'
    info = client.now_playing
    if info
      puts "#{info['SongName'] || info['Name']} - #{info['ArtistName']} - #{info['AlbumName']}"
    else
      puts "No song is playing"
    end
    exit
  end
end

require 'client'
require 'mplayer'
require 'ui'

client = GrooveShark::Client.new
$session = client.session

run_dbus client unless disable_dbus
DRb.start_service 'druby://localhost:68739', client unless disable_drb

#~ puts "Enter a search query:"
#~ query = gets.chomp
#~ puts
#~ puts "Searching for \"#{query}\":"
#~ results = client.search_songs(query)['Return']
#~ results.each do |result|
  #~ puts "#{results.index result} - #{result['Name']} - #{result['ArtistName']} - #{result['AlbumName']}"
#~ end
#~ 
#~ puts
#~ puts "Please type in a song index to [attempt to] play it:"
#~ index = gets.to_i
#~ 
#~ client.queue << results[index]
#~ Thread.new do
  #~ client.queue.play_radio
#~ end

ui = Remora::UI.new client

trap 'INT' do
  ui.undo_modes
  exit
end

def time_to_s seconds
  sec ||= 0
  minutes = seconds.to_i/60
  "#{minutes}:#{(seconds.to_i-(minutes*60)).to_s.rjust 2, '0'}"
end

begin
  while true
    ui.panes[:queue].data = client.queue.songs.map do |(index, song)|
      #"#{song['SongName'] || song['Name']} - #{song['ArtistName']} - #{song['AlbumName']}"
      "#{index.to_s.rjust 2}. #{song['SongName'] || song['Name']}"
    end
    
    if client.player && client.now_playing
      ui.panes[:np].data = [
        "#{client.now_playing['SongName'] || client.now_playing['Name']} - #{client.now_playing['ArtistName']} - #{client.now_playing['AlbumName']}".center(ui.panes[:np].width),
        "="*((client.player.position.to_f/client.now_playing['EstimateDuration'].to_f)*ui.panes[:np].width)+'>',
        "#{time_to_s client.player.position} / #{time_to_s client.now_playing['EstimateDuration']} (#{client.player.streamed_size.to_i/1024} / #{client.player.total_size.to_i/1024} KiB)",
      ]
    end
    
    ui.redraw
    sleep 0.1
  end
rescue => ex
  ui.undo_modes
  puts ex.class, ex.message, ex.backtrace
  exit
end
